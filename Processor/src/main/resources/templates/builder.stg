builderClass(data) ::= <<
<if(data.packageName)>package <data.packageName>;
<endif>

import javax.annotation.Generated;
import java.util.*;

@Generated("cz.rysavi.annotations.processors.FluentBuilderProcessor")
public class <data.builderClassName> {

	<! executions list definition !>
	private final List\<Execution> executions = new ArrayList\<Execution>();

	<! builder fields definition !>
	<data.fields:builderField()>
	<! empty constructor !>
	public <data.builderClassName>() {
	}

	<! builder constructor !>
	public <data.builderClassName>(<data.builderClassName> builder) {
		<data.fields:builderBuilderConstructorBody()>
	}

	<! instance constructor !>
	public <data.builderClassName>(<data.instanceClassName> instance) {
		<data.fields:builderInstanceConstructorBody()>
	}
	<! special constructors !>
	<data.constructors:builderConstructor()>
	<! base with methods !>
	<data.fields:builderWithMethod()>
	<! combinations with methods !>
	<data.combinations:builderCombinationWithMethod()>
	<! additions with methods !>
	<data.additions:builderAdditionWithMethod()>

	<! build method !>
	public <data.instanceClassName> build() {
		<data.instanceClassName> result = new <data.instanceClassName>(<builderMethodCallParametersThis(data.constructorFields)>);

		<data.fields:builderBuildMethodBody()>
		for (Execution execution: executions) {
			execution.execute(result);
		}

		return result;
	}

	<! copy method !>
	public static <data.instanceClassName> copy(<data.instanceClassName> instance) {
		<data.instanceClassName> result = new <data.instanceClassName>(<builderMethodCallParametersGetter(data.constructorFields, "instance")>);

		<data.fields:builderCopyMethodBody()>
		return result;
	}

	<! Execution interface definition !>
    private static interface Execution {
        public void execute(<data.instanceClassName> instance);
    }

	<! Builder field value type !>
    private static class FieldValue\<T> {
        private T value;
        public FieldValue(T value) {
            this.value = value;
        }
    }
}
>>

builderField(field) ::= <<
private FieldValue\<<field.type>\> <field.name> = <if(field.ignoreNulls)>null<else>new FieldValue(null)<endif>;

>>

builderBuilderConstructorBody(field) ::= <<

this.<field.name> = builder.<field.name>;
>>

builderInstanceConstructorBody(field) ::= <<

this.<field.name> = new FieldValue(instance.<field.getterMethodName>());
>>

builderWithMethod(field) ::= <<


public <data.builderClassName> <field.withMethodName>(<field.type> <field.name>) {
	this.<field.name> = new FieldValue(<field.name>);
	return this;
}
>>

builderConstructor(constructor) ::= <<


public <data.builderClassName>(<builderMethodParameters(constructor.parameters)>) {
	<constructor.parameters:builderConstructorBody()>
}
>>

builderConstructorBody(parameter) ::= <<

this.<parameter.name> = <parameter.name>;
>>

builderCombinationWithMethod(combination) ::= <<


public <data.builderClassName> <combination.withMethodName>(<builderMethodParameters(combination.fields)>) {
    return this
<combination.fields:builderCombinationWithMethodBody()>;
}
>>

builderCombinationWithMethodBody(field) ::= <<

        .<field.withMethodName>(<field.name>)
>>

builderAdditionWithMethod(addition) ::= <<


public <data.builderClassName> <addition.withMethodName>(<builderMethodParameters(addition.parameters)>) {
    executions.add(new Execution() {
        @Override
        public void execute(<data.instanceClassName> instance) {
            instance.<addition.methodName>(<builderMethodCallParameters(addition.parameters)>);
        }
    });
    return this;
}
>>

builderBuildMethodBody(field) ::= <<
<if(!field.constructorField)>if(this.<field.name> != null) result.<field.setterMethodName>(this.<field.name>.value);
<endif>
>>

builderCopyMethodBody(field) ::= <<
<if(!field.constructorField)>result.<field.setterMethodName>(instance.<field.getterMethodName>());
<endif>
>>

builderMethodParameters(parameters) ::= <<
<first(parameters):builderMethodParameterFirst()><rest(parameters):builderMethodParameterRest()>
>>

builderMethodParameterFirst(parameter) ::= <<
final <parameter.type> <parameter.name>
>>

builderMethodParameterRest(parameter) ::= <<
, <builderMethodParameterFirst(parameter)>
>>

builderMethodCallParameters(parameters) ::= <<
<first(parameters):builderMethodCallParameterFirst()><rest(parameters):builderMethodCallParameterRest()>
>>

builderMethodCallParameterFirst(parameter) ::= <<
<parameter.name>
>>

builderMethodCallParameterRest(parameter) ::= <<
, <builderMethodCallParameterFirst(parameter)>
>>

builderMethodCallParametersThis(parameters) ::= <<
<first(parameters):builderMethodCallParameterThisFirst()><rest(parameters):builderMethodCallParameterThisRest()>
>>

builderMethodCallParameterThisFirst(parameter) ::= <<
this.<parameter.name>
>>

builderMethodCallParameterThisRest(parameter) ::= <<
, <builderMethodCallParameterThisFirst(parameter)>
>>

builderMethodCallParametersGetter(parameters, instance) ::= <<
<first(parameters):builderMethodCallParameterGetterFirst()><rest(parameters):builderMethodCallParameterGetterRest()>
>>

builderMethodCallParameterGetterFirst(parameter) ::= <<
<instance>.<parameter.getterMethodName>()
>>

builderMethodCallParameterGetterRest(parameter) ::= <<
, <builderMethodCallParameterGetterFirst(parameter)>
>>
